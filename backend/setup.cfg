[mypy]
plugins = pydantic.mypy

strict_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
disallow_any_generics = True
check_untyped_defs = True

disallow_untyped_defs = True

[pydantic-mypy]
init_forbid_extra = True
init_typed = True
warn_required_dynamic_aliases = True
warn_untyped_fields = True

[mypy-sqlalchemy.*]
ignore_missing_imports = True


[flake8]
format = wemake
max-line-length = 80
ignore =
    # # common errors:
    # # FastAPI architecture requires a lot of functions calls as default arguments, so ignore it here.
    # B008,
    # # docs are missing in this project.
    # D, RST

    # # WPS: 3xx
    # # IMO, but the obligation to specify the base class is redundant.
    # WPS306,

    # # WPS: 4xx
    # # FastAPI architecture requires a lot of complex calls as default arguments, so ignore it here.
    # WPS404,
    # # again, FastAPI DI architecture involves a lot of nested functions as DI providers.
    # WPS430,

    # # WPS: 6xx
    # # pydantic defines models in dataclasses model style, but not supported by WPS.
    # WPS601,
    WPS115, # Found upper-case constant in a class
    D101, # Missing docstring in public class
    D100, # Missing docstring in public module
    D102, # Missing docstring in public method
    D103, #  Missing docstring in public function
    D104, # Missing docstring in public package
    D106, # Missing docstring in public nested class
    # D401,
    # W504,
    # RST303,
    
    # RST304,
    # DAR103,
    # DAR203,
no-accept-encodings = True
nested-classes-whitelist=Config
inline-quotes = double
max-complexity = 6

# # darglint:
docstring-style = NUMPY